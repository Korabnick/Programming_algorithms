"""
Сложность данной функции O(n^2) т.к. имеет вложенный цикл.
Функция проходит по всей сетке и проверяет наличие нулей по сторонам у единиц, если вокруг единиц нули, значит
к счетчику острова прибавляется 1.
Функция возвращает кол-во островов
"""

from typing import List

def numIslands(grid: List[List[str]]) -> int:
    r = len(grid)                 # Переменной задаем длину сетки.
    if r == 0:                    # Если длина сетки равна нулю, то вернется 0.
        return 0 
    c = len(grid[0])              # Переменной c задаем длину первой строки сетки.
        
    def DFS(i, j):                # Создаем функцию, принимающую i и j.
        if grid[i][j] == '1':     # Если элемент сетки в позиции i j равен 1,
            grid[i][j] = '0'      # То этому элементу присваивается 0.
            if i > 0:             # Если i меньше нуля, то запускаем эту же функцию, но с элементом i-1.
                DFS(i-1, j)
            if i < r - 1:         # Если i меньше длины всей сетки, то запускаем эту же функцию, но с элементом i+1.
                DFS(i+1, j)   
            if j > 0:             # Если j больше нуля, то запускаем эту же функцию, но с элементом j-1.
                DFS(i, j-1)   
            if j < c-1:           # Если j больше длины строки сетки, то запускаем эту же функцию, но с элементом j+1.
                DFS(i, j+1)   
                
    count = 0                     # задаем счетчик .
    for i in range(r):            # Цикл, проходящий по всей сетке.
        for j in range(c):        # Цикл, проходящий по сроке сетки.
            if grid[i][j] == '1': # Если элемент сетки равен 1,
                count += 1        # То к счетчику островов прибавляем 1.
                DFS(i, j)         # И снова запускаем функцию.
    return count                  # Возвращает кол-во островов.

print(numIslands([["1","1","0","0","0"],["1","1","0","0","0"],["0","0","1","0","0"],["0","0","0","1","1"]]))